{"version":3,"sources":["components/contactForm/ContactForm.module.css","components/contactForm/ContactForm.js","components/filter/Filter.js","components/contactList/ContactList.js","Phonebook.js","App.js","reportWebVitals.js","index.js","components/contactList/ContactList.module.css","components/filter/Filter.module.css"],"names":["module","exports","ContactForm","name","number","onChange","onHandleAppend","nameId","numberId","className","s","forma","title","inputForm","type","pattern","required","value","id","formBtn","onClick","Filter","filter","filterInput","ContactList","contacts","onDelete","map","length","contact","contactBtn","Phonebook","state","nameInputId","shortid","generate","numberInputId","handleChange","event","target","setState","reset","handleAppend","contactNew","undefined","noAddContact","alert","getСontactSearch","getFilterContacts","normalizeFilter","toLowerCase","includes","deletContact","prevState","find","prevContacts","localStorage","getItem","parceContacts","JSON","parse","this","prevProps","setItem","stringify","filterContacts","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e7636a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"forma\":\"ContactForm_forma__S10uw\",\"title\":\"ContactForm_title__Ouzov\",\"inputForm\":\"ContactForm_inputForm__1AtM1\",\"formBtn\":\"ContactForm_formBtn__3yX6w\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\nconst ContactForm = ({\n  name,\n  number,\n  onChange,\n  onHandleAppend,\n  nameId,\n  numberId,\n}) => {\n  return (\n    <form className={s.forma}>\n      <p className={s.title}>Name</p>\n      <input\n        className={s.inputForm}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        value={name}\n        id={nameId}\n        onChange={onChange}\n      />\n      <p className={s.title}>Number</p>\n      <input\n        className={s.inputForm}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        value={number}\n        id={numberId}\n        onChange={onChange}\n      />\n      <button className={s.formBtn} type=\"button\" onClick={onHandleAppend}>\n        Add contact\n      </button>\n    </form>\n  );\n};\nContactForm.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onHandleAppend: PropTypes.func.isRequired,\n  nameId: PropTypes.string.isRequired,\n  numberId: PropTypes.string.isRequired,\n};\nexport default ContactForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nconst Filter = ({ filter, onChange }) => {\n  return (\n    <label className={s.filter}>\n      Find contacts by name\n      <input\n        className={s.filterInput}\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        value={filter}\n        onChange={onChange}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\nconst ContactList = ({ contacts, onDelete }) => {\n  return (\n    <ul className={s.ContactList}>\n      {contacts.map(\n        ({ id, name, number }) =>\n          name.length > 0 &&\n          number.length > 0 && (\n            <li className={s.contact} key={id}>\n              {name}: {number}\n              <button\n                className={s.contactBtn}\n                type=\"button\"\n                onClick={() => onDelete(id)}\n              >\n                Delete\n              </button>\n            </li>\n          ),\n      )}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\nexport default ContactList;\n","import React from 'react';\nimport shortid from 'shortid';\nimport ContactForm from './components/contactForm';\nimport Filter from './components/filter';\nimport ContactList from './components/contactList';\nclass Phonebook extends React.Component {\n  state = {\n    contacts: [],\n    name: '',\n    number: '',\n    filter: '',\n  };\n  componentDidMount() {\n    const prevContacts = localStorage.getItem('contacts');\n    const parceContacts = JSON.parse(prevContacts);\n    if (parceContacts) {\n      this.setState({ contacts: parceContacts });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n  nameInputId = shortid.generate();\n  numberInputId = shortid.generate();\n\n  handleChange = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  handleAppend = () => {\n    const { name, number } = this.state;\n    const contactNew = {\n      id: shortid.generate(),\n      name: name,\n      number: number,\n    };\n    this.noAddContact() === undefined\n      ? this.setState(({ contacts }) => ({\n          contacts: [contactNew, ...contacts],\n        }))\n      : alert(`${name} is alredy in contact`);\n\n    this.reset();\n  };\n\n  getСontactSearch = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n  getFilterContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizeFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilter),\n    );\n  };\n  deletContact = id => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== id),\n    }));\n  };\n  noAddContact = () => {\n    const { name, contacts } = this.state;\n    const find = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n    return find;\n  };\n\n  render() {\n    const { name, number, filter } = this.state;\n    const filterContacts = this.getFilterContacts();\n    return (\n      <div>\n        <h2>Phonebook</h2>\n        <ContactForm\n          name={name}\n          number={number}\n          onChange={this.handleChange}\n          onHandleAppend={this.handleAppend}\n          nameId={this.nameInputId}\n          numberId={this.numberInputId}\n        />\n        <h2>Contacts</h2>\n        <Filter filter={filter} onChange={this.getСontactSearch} />\n        <ContactList contacts={filterContacts} onDelete={this.deletContact} />\n      </div>\n    );\n  }\n}\nexport default Phonebook;\n","import Phonebook from './Phonebook';\n\nfunction App() {\n  return (\n    <>\n      <Phonebook />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactList_contact__3_4lD\",\"contactBtn\":\"ContactList_contactBtn__sXs9v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1haKA\",\"filterInput\":\"Filter_filterInput__1sVzR\"};"],"sourceRoot":""}